[31.03.20] - Создал страницу для загрузки последней версии LightSearch Android в LightSearch Updater. При нажатии на
             кнопку 'Получить' скачивается APK-файл LightSearch Android последней версии. Также во время загрузки кнопка
             изменяется на уведомление о загрузке файла.

             Для реализации этой страницы в LightSearch Updater была создана точка GET app/versions/latest, которая
             выдает массив байтов файла. При этом сведения о последней версии берется с файла info.json.

             На этой странице была добавлена поддержка мобильных устройств, так как все же этой страницей будут
             пользоваться прежде всего пользователи мобильных устройств.

             Страница доступна по точке /app.

             Доделал обработку ошибок в LightSearch Server. Теперь ошибки будут приходить пользователям на русском языке,
             а на сервере будут писаться на английском + сообщение из соответствующего Exception.

             Убрал код лишний код из контролерров, обрабатывающих команды клиента и администратора. Прежде всего из
             контроллера администратора убрал Logger, и сделал новые декоратора процессов, исполняющих команды,
             содержащие Logger. Все действия, производимые с DTO, убрал внутрь метода formForSend() интерфейсов
             результата команд клиента и администратора.

             Исправил ошибку в LightSearch Android, которая заключалась в том, что при переходах из разных фрагментов
             главного меню эти фрагменты наслаивались друг на друга, и возникала такая ситуация, что при нажатии на
             пустую область одного фрагмента вызывались нажатия элементов другого фрагмента. Это было связано с
             анимацией перехода с одного фрагмента на другой. Код анимации был взят из официальной документации по
             Android: https://developer.android.com/training/animation/screen-slide#java. Проблемы возникали с анимацией
             Depth. Дело в том, что эта анимация не смещает фрагмент по оси абцисс. Об этом написано в документации, но
             в код примера не был включен расчет координаты заменяемого фрагмента. Куда применить код я так и не
             разобрался, поэтому взял другую анимацию - ZoomOut, для которой расчет не нужен.
------------------------------------------------------------------------------------------------------------------------
[25.03.20] - Добавил новую точку - /clients/checkAuth. Все, что выдает эта точка - поле isOK, которое имеет значение
             true. Эта точка сделана для того, чтобы клиент LightSearch Android не заходил в главное меню приложения, а
             в окно авторизации после того, как сервер был перезагружен, а токен еще не просрочен.

             Исправил ошибку в LightSearch Android, когда независимо от выбранного склада или ТК на сервер отправлялось
             значение 'all' по обоим видам подразделений.

             Исправил еще одну ошибку, которая заключалась в том, что при первой установке приложения при попытке
             подключения выдавало ошибку 'Неверный формат команды'. Это происходило от того, что IMEI, необходимый для
             авторизации, не имел значения постольку, поскольку при первом запуске сначала необходимо спросить
             разрешение на предоставление телефонных прав, а затем уже при положительном ответе снова сделать попытку
             получить его.
------------------------------------------------------------------------------------------------------------------------
[24.03.20] - Изменил время жизни JWT токена. Теперь его срок годности равняется текущей дате плюс дни, указанные в
             переменной lightsearch.server.jwt-valid-day-count property файла, до полуночи. То есть если текущие дата и
             время 24.03.20 15:20:00, jwt-valid-day-count = 1, то срок годности токена - 25.03.20 00:00:00.

             Когда изменял логику создания времени жизни JWT токена, то обнаружил, что эту логику необходимо
             делегировать уже другому интерфейсу. Поэтому я создал интерфейс JWTExpiration<T>, который имеет метод
             until(T). Он отвечает за генерацию времени жизни JWT.

             Затем я решил переименовать интерфейс JWTGenerator на JWT. Таким образом, я хочу начать небольшими шагами
             рефакторинг кода, в котором планирую полностью отказаться от имен интерфейсов и классов, заканчивающихся на
             'er', 'or'. Я считаю, что лучше оперировать сущностями в ООП, чем утилитой, которая может предоставить
             готовую форму. Лучше делегировать классу те обязанности, которые он должен исполнять, нежели делегировать
             их другому какому-нибудь создателю. Ведь в таком случае получается, что у сущностей совершенно нет логики,
             они будут так называемыми Pojo, DAO, или DTO объектами, что, как по мне, не может быть и не должно быть в
             ООП.
------------------------------------------------------------------------------------------------------------------------
[23.03.20] - Изменил логику входа в приложение LightSearch Android. Когда клиент находится в главном меню, то после
             нажатия кнопки 'назад' смартфона, происходит выход из приложения. Когда пользователь снова откроет
             приложение, то LightSearch Android проверит срок годности токена, и если он просрочен, то покажет окно
             авторизации, а иначе перейдет в главное меню и отправит две команды на сервер - clients/tkList и
             clients/skladList, и будет выполнять их в каждом отдельном AsyncTask.

             clients/tkList и clients/skladList выгружают список складов и ТК соответственно. Они необходимы для
             заполнения Spinner'ов фрагмента поиска в LightSearch Android. Для этого был создан Progress Bar, который
             приобретает значение свойства visibility.GONE после завершения работы AsyncTask по заполнению Spinner'а.

             Был замечен эффект: если переходить в другую вкладку (например, 'еще') и после перейти обратно на вкладку
             'поиск', то запускается заново отрисовка данного окна (вызывается метод onCreateView), при этом до этого
             метод onSaveInstanceState вызван не был. Поэтому раз за разом дергался сервер, что не есть хорошо. Поэтому
             был создан класс SpinnerWithCallback, которому можно установить callback-функцию после вызова setAdapter.
             Был написан callback, который в качестве параметра принимает данные, которые имеет Spinner. Таким образом,
             при помощи этого callback'а можно сохранять массивы с данными во фрагменте, тем самым не вызывая каждый раз
             команды сервера при перелистывании страниц.

             Была добавлена команда /clients/softChecks/products : поиск для мягкого чека. Эта команда отличается от
             команды /clients/products тем, что в ней мы не указываем по какому складу и ТК необходимо
             осуществлять поиск, а указываем имя пользователя, который закреплен за определенным подразделением, по
             которому и будет осуществляться поиск.

             Обновил иконку приложения и сделал ее адаптивной для всех графических оболочек.
------------------------------------------------------------------------------------------------------------------------
[20.03.20] - Полностью изменил UI в LightSearch Android. Теперь приложение использует не TabLayout в главном меню, а
             bottom navigation bar с тремя вкладками: 'поиск', 'задачи' и 'еще'. В 'поиске' используется
             Floating Action Button (FAB), на которую возложена функция сканирования штрих-кода через камеру смартфона.
             Также теперь после сканирования штрих-кода камерой сразу происходит поиск по считанному штрих-коду. Кнопка
             'Поиск' убрана. Теперь для поиска необходимо нажать кнопку Enter на клавиатуре смартфона. Для этого в
             EditText необходимо сменить значение свойства 'imeOptions' на 'actionSearch', и добавить в классе
             фрагмента, который использует данный layout, в экземпляре класса EditText EditorActionListener через метод
             OnEditorActionListener.

             Во вкладке 'задачи' имеются две кнопки: 'мягкий чек' и 'привязка товара'. Привязка товара работает так же,
             как и в предыдущей версии приложения, за исключением добавления FAB сканирования штрих-кода камерой и
             заменой кнопки поиска на клавишу Enter клавиатуры.

             При нажатии на кнопку 'Мягкий чек' открывается экран, в котором пользователю предлагают либо считать
             штрих-код карточки при помощи сканера, либо при помощи камеры. После считывания идет проверка: не закреплен
             ли за этой картой не закрытый мягкий чек? Если по этой карте чек открыт, то приложение уведомит об этом
             пользователя, и предложит ему отменить этот чек. После открытия чека открывается окно 'мягкий чек'. В нем
             можно добавлять товары, находя их по наименованию, или по штрих-коду. Кнопка 'В корзину' отсутствует,
             теперь вместо нее counterFAB с изображением тележки. При добавлении товара возле кнопки появляется счетчик
             количества текущих позиций в мягком чеке.

             При поиске по наименованию в мягком чеке создается полноэкранный AlertDialog со списком доступных товаров.

             После нажатия на counterFAB с изображением тележки осуществляется переход в корзину. В ней идет проверка
             остатков всех единиц товаров. Если остатков на складах меньше, чем указано в чеке, то приложение уведомоит
             об этом пользователя. После нажатия кнопки 'Закрыть мягкий чек' снова идет проверка остатков, и если чек
             закрылся с успехом, то идет возращение в меню мягкого чека.

             Во вкладке 'еще' доступна информация о пользователе, который зашел в текущую сессию, информация о
             приложении, и кнопка выхода из текущей сессии.

             Изменил загрузку обновления приложения. Вместо Intent'а, используемого в AppUpdater, я применил
             DownloadManager. При помощи него даже не надо открывать браузер - обновление скачивается прямо в папку
             Downloads и уведомления о скачивании происходит в шторке уведомлений.
------------------------------------------------------------------------------------------------------------------------
[11.03.20] - Объединил в LightSearch Android все сделанные фрагменты. Теперь в главном меню приложения доступны
             следующие окна (сделаны через TabLayout): 'Поиск', 'Мягкий чек', 'Операции', в операциях же:
             'Привязка товара', 'Отвязка товара'.
------------------------------------------------------------------------------------------------------------------------
[06.03.20] - Исправил изменение ширины карточки на странице 'Главная'. Теперь ширина растягивается относительно размеров
             экрана.
------------------------------------------------------------------------------------------------------------------------
[05.03.20] - Сделал рефакторинг кода LightSearch Updater. Исправил многие ошибки, такие как неправильное использование
             Spring, ошибки в дизайн, грубые нарушения в ООП, написал юнит-тесты, а не интеграционные тесты под видом
             юнит-тестов. Приложение работает точно так же, как и до этого.

             Добавил на свою страницу сайта вкладки: 'Главная' и 'История'. Во вкладке 'Главная' содержится общая
             информация о проекте и ссылки, в во вкладке 'История' содержится Dev notes.
------------------------------------------------------------------------------------------------------------------------
[03.03.20] - Сделал миграцию проектов Spring Edition. Теперь LightSearch Server, LightSearch Android и
             LightSearch Updater имеют собственные репозитории. Этот репозиторий будет хранилищем Standard Edition,
             документов к проекту и будет собирательным репозиторием для всех проектов, входящих в состав LightSearch.
             Также я оставил когда-то давно сделанный ClientBot на Spring в папке проектов Spring Edition. Может в
             будущем он мне и пригодится.

             Удалил все коммиты. Это довольно печальная, но вынужденная мера. Я хотел удалить некоторые коммиты, которые
             мне не нравились, и сломал всю систему. В итоге у меня из 400 коммитов стало 1200. В итоге я размножил все
             коммиты в 3 раза.

             Насчет Admin Panel я еще не решил, что делать: либо сделать частью проекта LightSearch Server, либо как
             отдельный проект на React.

             Сделал github pages для проекта LightSearch. Теперь Dev notes доступен и в нем. Располагается он по
             следующей ссылке: https://viise.github.io/LightSearch/
------------------------------------------------------------------------------------------------------------------------
[23.02.20] - Переписал LightSearch Android на Retrofit2. Теперь он полностью поддерживает REST.

             Исправил UI привязки товара. Теперь на одной линии поместились поисковая строка, и кнопки сканирования
             штрих-кода и поиска. Если при поиске товара по заводскому штрих-коду ввести 13 символов, то автоматически
             начнется поиск этого товара. То же самое справедливо и для случая, когда нажимается кнопка сканирования
             штрих-кода. Сначала этот функционал был сделан через onKeyUp() метода Activity, но при сборке релизного APK
             и установке приложения на другой смартфон этот функционал не работал. Причину я так и не смог найти.
             Поэтому я сделал другую реализацию через TextWatcher, который я повесил на EditText поля поиска привязки,
             и это заработало.

             Если при проверке привязки товар не был найден, то при переходе в режим привязки кнопка поиска меняет свой
             значек на значок привязки.

             Теперь вместо диалогового окна при нахождении товара по заводскому штрих-коду показывается карточка снизу,
             и snackbar снизу уведомляет об этом событии.

             В LightSearch Server я отказался от lsCode типа Long в пользу lsCode типа SHA-256. Хэш делается из текущего
             времени + соль, которая генерируется экземпляром класса Random методом nextGaussian(). На днях я проверял
             коллизию этого метода: проверил его на 100 миллионах итерациях. Убедился в том, что коллизий нет, и решил
             принять этот метод в качестве генерации соли. Такой подход полностью избавил LightSearch Server и от
             таймера, и от файла db_identifier.
------------------------------------------------------------------------------------------------------------------------
[13.02.20] - Прикрутил к LightSearch Swagger2. Задокументировал подробно все точки и модели. Создал два докета - первый
             для команд клиента, второй для команд администратора.

             Добавил csrf защиту в Spring Security. Также добавил нового пользователя - dev, то есть разработчик, и
             изменил механизм перенаправлений на страницы. Теперь если пользователь имеет роль ADMIN, то после
             авторизации его перенаправляет на панель администратора. При этом документация, которая находится по адресу
             /docs, не доступна ему (403 forbidden). Если же пользователь имеет роль DEV, то после авторизации его
             перекидывает на страницу с документацией, и при этом он может перейти в панель администратора, перейдя по
             адресу /session/admin.
------------------------------------------------------------------------------------------------------------------------
[11.02.20] - Переписал LightSearch Server на Spring. Избавился от множества кода, особенно от продьюсеров. Добавил
             юнит-тесты и интеграционные тесты.

             Теперь IMEI присылаются только на стадии авторизации, и после этого сразу же хешируется при помощи SHA-512
             и помещается в jwt токен в subject. На сервере поставлен фильтр, который проверяет токены, выданные
             пользователям после успешной авторизации.

             Таймер клиентов убран вообще и теперь вместо него применяется jwt токен, который имеет свой срок жизни.
             Таймер перезагрузки сервера убран вообще, команда перезагрузки сервера админом оставлена.

             Применяется паттерн декоратор для описания таких сущностей, как результат работы команды администратора и
             клиента, команда администратора и клиента, свойства конфигурационного файла итд. POJO-объекты применяются
             только тогда, когда это действительно необходимо.

             Переписан пакет database. Теперь есть репозитории и CommandExecutor, который исполняет команды, пришедшие к
             нему, и выдает их результат.

             Все константы переведены в нижний регистр, а клиенту больше не требуется указывать поле команды вообще. Эту
             функцию выполняет точка в RESTful API.

             Использованы теперь не только POST запросы, но и GET, PUT, DELETE.

             Добавлены две новые бизнес-функции - проверка привязки товара к заводскому штрих-коду и привязка товара к
             заводскому штрих-коду.
------------------------------------------------------------------------------------------------------------------------
[01.11.19] - Переписал LightSearch Server на REST. API сервера будет скоро описано в соответствующем документе. Здесь я
             отмечу, что выбрана именно такая модель API (то есть когда одна точка для нескольких команд, а название
             самой команды передается в JSON) потому, что с текущей схемой работы сервера создание для каждой команды
             точки приведет только к дублированию кода.

             В REST версии сервера я применил из проекта Spring Cloud создание задач по расписанию. На текущий момент
             реализовано три задачи, одна из которых стоит под вопросом:
             1) Таймер тайм-аута клиента. Если на сервере тайм-аут клиента включен, то каждую секунду происходит
             уменьшение значения времени тайм-аута всех подключенных клиентов на 1. После этого идет проверка на
             значение тайм-аута: если оно равно 0, то клиент исключается из текущей сессии;
             2) Таймер записи значения LSCODE в файл. Этот таймер каждые 30 минут записывает значение LSCODE в файл
             db_identifier;
             3) RestartTimer - перезагружает сервер в определенное время. Данный таймер стоит под вопросом надобности
             вообще: можно оставить перезагрузку только как команду администратора. Также было замечено, что если сервер
             перезагружать без остановки, но с задержкой, то приложение рано или поздно выведит ошибку
             java.lang.outOfMemoryError. Есть предположение, что это просто от того, что сервер не успевает вычищать
             память после каждой перезагрузки, то есть в реальной эксплуатации этого не должно произойти. Но этот
             сценарий будет проверяться тестами.

             Теперь настройки сервера хранятся в файле application.properties. Доступные настройки:
             1) lightsearch.server.settings.timeout.client-timeout - значение тайм-аута клиента, в секундах;
             2) lightsearch.server.settings.timeout.reduce-value - значение, на которое каждую секунду уменьшается
             значение тайм-аута клиента, в секундах;
             3) lightsearch.server.settings.restart.restart-time - время перезагрузки сервера. Паттерн значения времени:
             HH:ss;
             4) lightsearch.server.settings.restart.frequency - указывает, через какое количество дней необходимо
             перезагружать сервер. Например, если указано число 1, то это означает, что сервер будет перезагружаться
             каждый день. Значение, равное 0, указывать только в случае теста и отладки!
             5) lightsearch.server.admin.username - имя администратора. В версии Spring нет надобности в нескольких
             администраторов, поэтому параметры одного (и единственного) из них можно записать в property файл.
             6) lightsearch.server.admin.password - пароль администратора. В данном случае это дайджест пароля. В
             текущей версии LightSearch Server используется алгоритм bcrypt с 10 раундами.

             Для общения с СУБД был использован интерфейс JdbcTemplate. Hibernate пока что не был применен по причине
             того, что его необходимо изучать и также делать проверку при помощи тестов, а это время. Времени пока нет,
             поэтому был сделан более быстрый вариант. Проблема также в том, что на предприятии СУБД Firebird работает
             на кодировке windows-1251, что создает еще больше проблем для применения Hibernate.

             Для тестов была использована база данных H2. Для того, чтобы H2 была использована только в тестах,
             необходимо в папке test/resources создать файл application.properties с настройками H2.
             Для создания базы необходимо два файла: data.sql и schema.sql. В schema.sql указывается схема бд, а в
             data.sql - данные. При работе с H2 возникли некоторые трудности: я не смог перевести корректно BLOB в
             String. Все советы, решения и официальная документация не помогли, и все, что мне оставалось сделать, это
             сохранять команду в поле VARCHAR. Но нужно понимать, что это только для тестов. В реальной базе следует
             использовать BLOB, т.к. он банально способен держать намного больше объем данных.
------------------------------------------------------------------------------------------------------------------------
[17.09.19] - Написал юнит-тесты для LightSearch Updater, используя JUnit, TestNG и Mockito. В TestNG применил Suite XML.
             Это позволило перенести все простые параметры в него, и сконфигурировать запуск тестов по пакетам.
------------------------------------------------------------------------------------------------------------------------
[12.09.19] - Создал панель администратора LightSearch Updater, используя Spring Boot, MVC, Security, и Vaadin. Теперь,
             набрав в поиске адрес сервера, открывается форма с авторизацией. После успешного входа в систему
             открывается страница панели администратора. При помощи нее можно создавать новые версии релиза мобильного
             приложения LightSearch Android, загружая файл обновления через технологию Drag-and-Drop и введя название
             релиза. Также можно изменять информацию о релизе, которую считывает мобильное приложение для проверки
             обновления, непосредственно в браузере. При этом поддерживается проверка синтаксиса JSON.
------------------------------------------------------------------------------------------------------------------------
[05.09.19] - Создал авто-обновление LightSearch Android. Для этого был написан сервис LightSearch Updater, работающий с
             фреймворком Spring. Для Android приложения была использована библиотека AppUpdater. Но она не удовлетворяля
             по нескольким причинам:
             1) Нельзя изменить View диалогового окна; 2) Кнопка "Больше не напоминать" - у нас не такое приложение,
             где можно включать такую функцию. Библиотека не дает делать такие настройки, поэтому были скачаны ее
             исходники, и весь необходимый функционал был вытащен и внедрен в проект, также были добавлены новые
             функции, и все остальное ненужное - удалено.

             Теперь, когда мобильное приложение запускается, оно проверяет наличие обновления, и если оно таковое
             имеется, то предлагает пользователю обновится. Если он соглашается, то открывается браузер, скачивается
             apk, и приложение обновляется.
------------------------------------------------------------------------------------------------------------------------
[03.09.19] - Сделал кастомный AlertDialog и SpotsDialog. Для этого надо было создать новый drawable background и style.
             Теперь диалоговые окна стали с закругленными краями, и их кнопки стали в стиле кнопок приложения.

             Перенес все строки в файл strings.xml. Небольшие фиксы в UI.

             Пытался добавить шрифт OpenSans, но после его добавления сильной разницы в UI не было замечено, поэтому
             шрифт остался по умолчанию. Также сделал кастомный CheckBox, но такую хорошую анимацию, как в CheckBox по
             умолчанию, я сделать не смог, поэтому оставил новый drawable на потом, когда научусь делать анимацию.
------------------------------------------------------------------------------------------------------------------------
[30.08.19] - Изменил отображение результата поиска. Теперь одной записью результата поиска считается уникальный товар
             (то есть со своим штрих-кодом). В всплывающем окне отображается информация об этом товаре: наименование, ИД
             (штрих-код), общее количество товара, цена за единицу, и список подразделений. Каждое подразделение
             представляет собой наименование подразделения и количество данного товара в этом подразделении.

             Окно результата поиска никуда не делось и будет использоваться в дальнейшем, если заказчик попросит поиск
             по наименованию. Теперь карточка представляет из себя карточку товара с общей стоимостью и списком
             подразделений. Для этого необходимо было генерировать динамически CardView. Для того, чтобы этот эффект был
             достигнут, необходимо заранее их готовить в AsyncTask, и контролировать, чтобы готовые карточки в адаптере
             в методе getView() не создавались заново, а вызывались из списка.

             Улучшил энергоэффективность приложения. Опыт с таймером в LightSearch Server помог. Дело в том, обработчик
             клиента в цикле постоянно проверяет, нет ли команды на исполнение. Если не ставить задержку, то процессору
             будет плохо. А на мобильном устройстве еще и аккумулятору. Я поставил задержку в 100 мс и эта проблема была
             решена.

             Улучшил UI. Теперь, при нажатии на кнопки и другую область, отличную от текущего EditText, экранная
             клавиатура закрывается. Навигационная панель (которая внизу и у которой три кнопки: назад, домой и все
             приложения) теперь цвета заднего плана приложения, что визуально увеличивает площадь.

             Изменил немного анимацию нажатия кнопок. Теперь нажатия более очевидны.

             Изменил задержку проверки команды на 500 мс. На скорость это мало влияет (для человека она не заметна), а
             для памяти и процессора - еще как заметна. Теперь приложение потребляет меньше ресурсов процессора и меньше
             оперативной памяти.

             Теперь при показе всплываюшего окна результата поиска нельзя отменить его показ, нажав на любую область
             экрана. Теперь надо нажимать кнопку "ОК".
------------------------------------------------------------------------------------------------------------------------
[26.08.19] - Написал JavaDoc для LightSearch Server Standard Edition.
------------------------------------------------------------------------------------------------------------------------
[20.08.19] - Реорганизовал юнит-тесты в LightSearch Server и LightSearch Client Bot.
------------------------------------------------------------------------------------------------------------------------
[19.08.19] - Запустил LightSearch Server Standard Edition с ключом -Xmx. Как оказалось, для успешного запуска ему
             достаточно 4 мегабайта оперативной памяти. Более того, он смог проработать на 4-ех мегабайтах, выдержав 8
             клиентов, каждый из которых делал 500 циклов, в каждом цикле которого 7 команд.
             LightSearch Server Spring Edition запустился на 7-ми мегабайтах, выдержав такую же тестовую конфигурацию.
             Подозреваю, что большую часть оперативной памяти, потребляемый процессом, который показывал диспетчер
             задач, потребляет сама Windows. Например, для отрисовки командной строки и обновления вывода текста на
             экране.
------------------------------------------------------------------------------------------------------------------------
[15.08.19] - Провел тест потребления оперативной памяти LightSearch Server Spring Edition. Итог - 108 мегабайт. Также
             использовал диспетчер задач Windows. Создана новая версия LightSearch Server, написанная на
             Spring Framework 5 (Spring Boot 2). Конфигурация смешанная (аннотации + xml).
------------------------------------------------------------------------------------------------------------------------
[09.08.19] - Создана новая версия LightSearch Client Bot, написанная на Spring Framework 5 (Spring Boot 2). Конфигурация
             на аннотациях.
------------------------------------------------------------------------------------------------------------------------
[07.08.19] - Перевел программный комплекс LightSearch с Apache Ant на Apache Maven.
------------------------------------------------------------------------------------------------------------------------
[06.08.19] - Создал экспериментальные таймеры с GC (Garbage Collector). Памяти стало лучше, но процессору - нет.
------------------------------------------------------------------------------------------------------------------------
[05.08.19] - Проверял, сколько потребляет LightSearch Server оперативной памяти. Итог - 17 мегабайт в простое, дальше
             после каждой итерации теста с LightSearch Client Bot память увеличивалась на 2к килобайта. Для
             профилирования использовал Visual VM, для проверки потребления количества оперативной памяти - диспетчер
             задач Windows.
------------------------------------------------------------------------------------------------------------------------
[01.08.19] - Создал функцию среднего замера времени обработки блока программы LightSearch Server. Для этого создал новую
             команду, которую отсылает LightSearch Client Bot после тестирования LightSearch Server'у Системный бот
             уведомляет о том, что необходимо посчитать среднее время. Пока что замерял только время отправки сообщения
             клиенту. Итог - 15 мс. К тому же провел тест на прочность. Итог - сервер смог выдержать 50 ботов-клиентов,
             каждый из которых делал 100 циклов по 1000 команд в каждом с задержкой перед отправкой сообщения в 10 мс.
------------------------------------------------------------------------------------------------------------------------
[29.07.19] - Написал юнит-тесты для LightSearch Client Bot.
------------------------------------------------------------------------------------------------------------------------
[26.07.19] - Написал ботов (проект LightSearch Client Bot) для тестирования LightSearch Server.
------------------------------------------------------------------------------------------------------------------------
[23.07.19] - Создал документацию в формате ODT и PDF для пользователей LightSearch Android.
------------------------------------------------------------------------------------------------------------------------
[20.05.19] - Создал layout корзины + его логику обработки(UI-логику + обработчики команд подтверждения товаров мягкого
             чека и закрытия мягкого чека).
------------------------------------------------------------------------------------------------------------------------
[16.05.19] - Создал layout мягкого чека + его логику обработки(UI-логику + обработчик команды). Изучил и применил
             Recycler View.
------------------------------------------------------------------------------------------------------------------------
[09.11.18] - Перевел LightSearch Android с нескольких Activity на Fragment. Теперь одно Activity, и несколько
             Fragment'ов.
------------------------------------------------------------------------------------------------------------------------
[11.09.18] - Создал прототип программного комплекса LightSearch (LightSearch Server, LightSearch Admin Panel,
             LightSearch Android) в стиле языка C.
------------------------------------------------------------------------------------------------------------------------
