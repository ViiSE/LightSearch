[11.09.18] - Создал прототип программного комплекса LightSearch (LightSearch Server, LightSearch Admin Panel, LightSearch Android) в 
             стиле языка C.
---------------------------------------------------------------------------------------------------------------------------------------
[09.11.18] - Перевел LightSearch Android с нескольких Activity на Fragment. Теперь одно Activity, и несколько Fragment'ов.
---------------------------------------------------------------------------------------------------------------------------------------
[16.05.19] - Создал layout мягкого чека + его логику обработки(UI-логику + обработчик команды). Изучил и применил Recycle View.
---------------------------------------------------------------------------------------------------------------------------------------
[20.05.19] - Создал layout корзины + его логику обработки(UI-логику + обработчики команд подтверждения товаров мягкого чека и закрытия 
	     мягкого чека).
---------------------------------------------------------------------------------------------------------------------------------------
[23.07.19] - Создал документацию в формате ODT и PDF для пользователей LightSearch Android.
---------------------------------------------------------------------------------------------------------------------------------------
[26.07.19] - Написал ботов (проект LightSearch Client Bot) для тестирования LightSearch Server.
---------------------------------------------------------------------------------------------------------------------------------------
[29.07.19] - Написал юнит-тесты для LightSearch Client Bot.
---------------------------------------------------------------------------------------------------------------------------------------
[01.08.19] - Создал функцию среднего замера времени обработки блока программы LightSearch Server. Для этого создал новую команду, 
	     которую отсылает LightSearch Client Bot после тестирования LightSearch Server'у Системный бот уведомляет о том, что 
	     необходимо посчитать среднее время. Пока что замерял только время отправки сообщения клиенту. Итог - 15 мс. К тому же 
	     провел тест на прочность. Итог - сервер смог выдержать 50 ботов-клиентов, каждый из которых делал 100 циклов по 1000 
	     команд в каждом с задержкой перед отправкой ссобщения в 10 мс.
---------------------------------------------------------------------------------------------------------------------------------------
[05.08.19] - Проверял, сколько потребляет LightSearch Server оперативной памяти. Итог - 17 мегабайт в простое, дальше после каждой 
	     итерации теста с LightSearch Client Bot память увеличивалась на 2к килобайта. Для профилирования использовал Visual VM, 
	     для проверки потребления количества оперативной памяти - диспетчер задач Windows.
---------------------------------------------------------------------------------------------------------------------------------------
[06.08.19] - Создал экспериментальные таймеры с GC (Garbage Collector). Памяти стало лучше, но процессору - нет.
---------------------------------------------------------------------------------------------------------------------------------------
[07.08.19] - Перевел программный комплекс LightSearch с Apache Ant на Apache Maven.
---------------------------------------------------------------------------------------------------------------------------------------
[09.08.19] - Создана новая версия LightSearch Client Bot, написанная на Spring Framework 5 (Spring Boot 2). Конфигурация на аннотациях.
---------------------------------------------------------------------------------------------------------------------------------------
[15.08.19] - Создана новая версия LightSearch Server, написанная на Spring Framework 5 (Spring Boot 2). Конфигурация смешанная 
	     (аннотации + xml).
---------------------------------------------------------------------------------------------------------------------------------------
[15.08.19] - Провел тест потребления оперативной памяти LightSearch Server Spring Edition. Итог - 108 мегабайт. Также использовал 
			 диспетчер задач Windows.
---------------------------------------------------------------------------------------------------------------------------------------
[19.08.19] - Запустил LightSearch Server Standard Edition с ключом -Xmx. Как оказалось, для успешного запуска ему достаточно 4 
	     мегабайта оперативной памяти. Более того, он смог проработать на 4-ех мегабайтах, выдержав 8 клиентов, каждый из которых 
	     делал 500 циклов, в каждом цикле которого 7 команд. LightSearch Server Spring Edition запустился на 7-ми мегабайтах, 
	     выдержав такую же тестовую конфигурацию. Подозреваю, что большую часть оперативной памяти, потребляемый процессом, который 
	     показывал диспетчер задач, потребляет сама Windows. Например, для отрисовки командной строки и обновления вывода текста на 
	     экране.
---------------------------------------------------------------------------------------------------------------------------------------
[20.08.19] - Реорганизовал юнит-тестов в LightSearch Server и LightSearch Client Bot.
---------------------------------------------------------------------------------------------------------------------------------------
[26.08.19] - Написал JavaDoc для LightSearch Server Standard Edition.
---------------------------------------------------------------------------------------------------------------------------------------
[30.08.19] - Изменил отображение результата поиска. Теперь одной записью результата поиска считается уникальный товар 
             (то есть со своим штрих-кодом). В всплывающем окне отображается информация об этом товаре: наименование, ИД (штрих-код),
	     обшее количество товара, цена за единицу, и список подразделений. Каждое подразделение представляет собой наименование
	     подразделения и количество данного товара в этом подразделении.
	     
	     Окно результата поиска никуда не делось и будет использоваться в дальнейшем, если заказчик попросит поиск по наименованию.
	     Теперь карточка представляет из себя карточку товара с общей стоимостью и списком подразделений. Для этого необходимо было
	     генерировать динамически CardView. Для того, чтобы этот эффект был достигнут, необходимо заранее их готовить в AsyncTask,
	     и контролировать, чтобы готовые карточки в адаптере в методе getView() не создавались заново, а вызывались из списка.
	     
	     Улучшил энергоэффективность приложения. Опыт с таймером в LightSearch Server помог. Дело в том, обработчик клиента в цикле
	     постоянно проверяет, нет ли команды на исполнение. Если не ставить задержку, то процессору будет плохо. А на мобильном
	     устройстве еще и аккумулятору. Я поставил задержку в 100 мс и эта проблема была решена.
	     
	     Улучшил UI. Теперь, при нажатии на кнопки и другую область, отличную от текущего EditText, экранная клавиатура закрывается.
	     Навигационная панель (которая внизу и у которой три кнопки: назад, домой и все приложения) теперь цвета заднего плана
	     приложения, что визуально увеличивает площадь.
	     
	     Изменил немного анимацию нажатия кнопок. Теперь нажатия более очевидны.
	     
	     Изменил задержку проверки команды на 500 мс. На скорость это мало влияет (для человека она не заметна), а для памяти и
	     процессора - еще как заметна. Теперь приложение потребляет меньше ресурсов процессора и меньше оперативной памяти.
---------------------------------------------------------------------------------------------------------------------------------------
